/*
 * Copyright (C) 2015 Aaron Lucia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package filesync.ui;

import filesync.FileSync;
import filesync.SyncIndex;
import static filesync.ui.UIAction.Pause;
import static filesync.ui.UIAction.Sync;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;

/**
 *
 * @author Aaron Lucia
 */
public class SettingsUI extends JFrame implements ActionListener {

    private final List<SyncIndex> syncIndexes;
    private final List<UIListener> _uiListeners;
    private final DefaultListModel listModel;

    /**
     * Creates new form FileSyncUI
     *
     * @param syncIndexes
     */
    public SettingsUI(List<SyncIndex> syncIndexes) {
        listModel = new DefaultListModel();
        initComponents();
        this.syncIndexes = syncIndexes;
        _uiListeners = new ArrayList<>();
        versionLabel.setText(FileSync.VERSION);
        updateIndexes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        indexesPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        modifyButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        syncButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        indexesScrollPane = new javax.swing.JScrollPane();
        indexesList = new javax.swing.JList(listModel);
        syncProgressBar = new javax.swing.JProgressBar();
        aboutPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FileSync");

        addButton.setText("Add");
        addButton.addActionListener(this);

        modifyButton.setText("Modify");
        modifyButton.addActionListener(this);

        removeButton.setText("Remove");
        removeButton.addActionListener(this);

        syncButton.setText("Sync");
        syncButton.addActionListener(this);

        pauseButton.setText("Pause All");
        pauseButton.addActionListener(this);

        indexesScrollPane.setViewportView(indexesList);

        javax.swing.GroupLayout indexesPanelLayout = new javax.swing.GroupLayout(indexesPanel);
        indexesPanel.setLayout(indexesPanelLayout);
        indexesPanelLayout.setHorizontalGroup(
            indexesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(indexesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(indexesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(syncProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(indexesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(indexesPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(syncButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pauseButton)))
                .addContainerGap())
        );
        indexesPanelLayout.setVerticalGroup(
            indexesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, indexesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(indexesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton)
                    .addComponent(modifyButton)
                    .addComponent(pauseButton)
                    .addComponent(syncButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(syncProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        syncButton.getAccessibleContext().setAccessibleName("Sync All");

        tabbedPane.addTab("Indexes", indexesPanel);

        jLabel1.setText("FileSync by Aaron Lucia");

        jLabel2.setLabelFor(versionLabel);
        jLabel2.setText("Version:");

        versionLabel.setText("version");

        jLabel3.setText("Â© Aaron Lucia 2015");

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(aboutPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(versionLabel))
                    .addComponent(jLabel1))
                .addContainerGap(372, Short.MAX_VALUE))
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(versionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addContainerGap(367, Short.MAX_VALUE))
        );

        tabbedPane.addTab("About", aboutPanel);

        exitButton.setText("Exit");
        exitButton.addActionListener(this);

        saveButton.setText("Save");
        saveButton.addActionListener(this);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap())
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton)
                    .addComponent(exitButton))
                .addContainerGap())
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == addButton) {
            SettingsUI.this.addButtonActionPerformed(evt);
        }
        else if (evt.getSource() == modifyButton) {
            SettingsUI.this.modifyButtonActionPerformed(evt);
        }
        else if (evt.getSource() == removeButton) {
            SettingsUI.this.removeButtonActionPerformed(evt);
        }
        else if (evt.getSource() == syncButton) {
            SettingsUI.this.syncButtonActionPerformed(evt);
        }
        else if (evt.getSource() == pauseButton) {
            SettingsUI.this.pauseButtonActionPerformed(evt);
        }
        else if (evt.getSource() == exitButton) {
            SettingsUI.this.exitButtonActionPerformed(evt);
        }
        else if (evt.getSource() == saveButton) {
            SettingsUI.this.saveButtonActionPerformed(evt);
        }
        else if (evt.getSource() == cancelButton) {
            SettingsUI.this.cancelButtonActionPerformed(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        SyncIndex index = new SyncIndex("New");
        syncIndexes.add(index);
        SyncIndexUI indexUI = new SyncIndexUI(index);
        indexUI.setVisible(true);
        updateIndexes();
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (indexesList.getSelectedValue() instanceof SyncIndex) {
            syncIndexes.remove((SyncIndex) indexesList.getSelectedValue());
        }
        updateIndexes();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed
        fireUIEvent(Sync);
    }//GEN-LAST:event_syncButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        fireUIEvent(Pause);
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void modifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyButtonActionPerformed
        if (indexesList.getSelectedValue() instanceof SyncIndex) {
            SyncIndexUI indexUI = new SyncIndexUI((SyncIndex) indexesList.getSelectedValue());
            indexUI.setVisible(true);
        }
    }//GEN-LAST:event_modifyButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JList indexesList;
    private javax.swing.JPanel indexesPanel;
    private javax.swing.JScrollPane indexesScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton modifyButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton syncButton;
    private javax.swing.JProgressBar syncProgressBar;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables

    public void updateSyncStatus(boolean syncing, double percent) {
        if (syncing) {
            syncButton.setText("Pause Sync");
        } else {
            syncButton.setText("Sync");
        }
        syncProgressBar.setValue((int) (percent * 100));
        pack();
    }

    public void updatePauseStatus(boolean paused) {
        if (paused) {
            pauseButton.setText("Restart Schedule");
        } else {
            pauseButton.setText("Pause Schedule");
        }
        pack();
    }

    private void updateIndexes() {
        listModel.clear();
        
        for (SyncIndex index : syncIndexes) {
            listModel.addElement(index);
        }
    }

    /**
     *
     * @param listener
     */
    public synchronized void addUIListener(UIListener listener) {
        if (!_uiListeners.contains(listener)) {
            _uiListeners.add(listener);
        }
    }

    /**
     *
     * @param listener
     */
    public synchronized void removeUIListener(UIListener listener) {
        _uiListeners.remove(listener);
    }

    /**
     *
     * @param status
     */
    private synchronized void fireUIEvent(UIAction action) {
        UIEvent event = new UIEvent(this, action);
        for (UIListener listener : _uiListeners) {
            listener.actionPerformed(event);
        }
    }
}
