/*
 * Copyright (C) 2015 Aaron Lucia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package filesync.ui;

import filesync.FileSync;
import filesync.SyncIndex;
import static filesync.ui.UIAction.Pause;
import static filesync.ui.UIAction.Sync;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aaron Lucia
 */
public class FileSyncUI extends javax.swing.JFrame implements ActionListener {

    private final List<UIListener> _uiListeners;

    /**
     * Creates new form FileSyncUI
     */
    public FileSyncUI() {
        initComponents();
        _uiListeners = new ArrayList<>();
        versionLabel.setText(FileSync.VERSION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        directoriesPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        directoriesScrollPane = new javax.swing.JScrollPane();
        directoriesTable = new javax.swing.JTable();
        schedulePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        aboutPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        versionLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        syncButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        syncProgressBar = new javax.swing.JProgressBar();
        exitButton = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FileSync");

        addButton.setText("Add");
        addButton.addActionListener(this);

        removeButton.setText("Remove");
        removeButton.addActionListener(this);

        directoriesTable.setModel(new TableModel());
        directoriesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        directoriesTable.setDefaultRenderer(File.class, new TableRenderer());
        directoriesScrollPane.setViewportView(directoriesTable);

        javax.swing.GroupLayout directoriesPanelLayout = new javax.swing.GroupLayout(directoriesPanel);
        directoriesPanel.setLayout(directoriesPanelLayout);
        directoriesPanelLayout.setHorizontalGroup(
            directoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(directoriesPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addGap(0, 329, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, directoriesPanelLayout.createSequentialGroup()
                        .addComponent(directoriesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        directoriesPanelLayout.setVerticalGroup(
            directoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, directoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directoriesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Directories", directoriesPanel);

        jLabel1.setText("Run schedule");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Hour", "Day", "Week", "Month" }));

        jLabel2.setText("times per");

        jSpinner1.setValue(1);

        javax.swing.GroupLayout schedulePanelLayout = new javax.swing.GroupLayout(schedulePanel);
        schedulePanel.setLayout(schedulePanelLayout);
        schedulePanelLayout.setHorizontalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(253, Short.MAX_VALUE))
        );
        schedulePanelLayout.setVerticalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(247, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Schedule", schedulePanel);

        jLabel3.setText("FileSync by Aaron Lucia");

        jLabel4.setText("Version:");

        versionLabel.setText("version");

        jLabel5.setText("Â© Aaron Lucia 2014");

        jLabel6.setText("Log Files:");

        browseButton.setText("Browse...");

        syncButton.setText("Sync");
        syncButton.addActionListener(this);

        pauseButton.setText("Pause Schedule");
        pauseButton.addActionListener(this);

        javax.swing.GroupLayout aboutPanelLayout = new javax.swing.GroupLayout(aboutPanel);
        aboutPanel.setLayout(aboutPanelLayout);
        aboutPanelLayout.setHorizontalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(syncProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(aboutPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton))
                    .addGroup(aboutPanelLayout.createSequentialGroup()
                        .addComponent(syncButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                        .addComponent(pauseButton))
                    .addGroup(aboutPanelLayout.createSequentialGroup()
                        .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(aboutPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(versionLabel))
                            .addComponent(jLabel3))
                        .addGap(0, 334, Short.MAX_VALUE)))
                .addContainerGap())
        );
        aboutPanelLayout.setVerticalGroup(
            aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(versionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addGroup(aboutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(syncButton)
                    .addComponent(pauseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(syncProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabbedPane.addTab("More Info", aboutPanel);

        exitButton.setText("Exit");
        exitButton.addActionListener(this);

        Save.setText("Save");
        Save.addActionListener(this);

        Cancel.setText("Cancel");
        Cancel.addActionListener(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Cancel)
                .addContainerGap())
            .addComponent(tabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cancel)
                    .addComponent(Save)
                    .addComponent(exitButton))
                .addContainerGap())
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == addButton) {
            FileSyncUI.this.addButtonActionPerformed(evt);
        }
        else if (evt.getSource() == removeButton) {
            FileSyncUI.this.removeButtonActionPerformed(evt);
        }
        else if (evt.getSource() == syncButton) {
            FileSyncUI.this.syncButtonActionPerformed(evt);
        }
        else if (evt.getSource() == pauseButton) {
            FileSyncUI.this.pauseButtonActionPerformed(evt);
        }
        else if (evt.getSource() == exitButton) {
            FileSyncUI.this.exitButtonActionPerformed(evt);
        }
        else if (evt.getSource() == Save) {
            FileSyncUI.this.SaveActionPerformed(evt);
        }
        else if (evt.getSource() == Cancel) {
            FileSyncUI.this.CancelActionPerformed(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_SaveActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_CancelActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        TableModel model = (TableModel) directoriesTable.getModel();
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        chooser.setDialogTitle("Select Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        List<Path> directories = new ArrayList<>();
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            directories.add(chooser.getSelectedFile().toPath());
            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                directories.add(chooser.getSelectedFile().toPath());
                model.addRow(new SyncIndex("", directories));
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) directoriesTable.getModel();
        int[] rows = directoriesTable.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(rows[i] - i);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed
        fireUIEvent(Sync);
    }//GEN-LAST:event_syncButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        fireUIEvent(Pause);
    }//GEN-LAST:event_pauseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JButton Save;
    private javax.swing.JPanel aboutPanel;
    private javax.swing.JButton addButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JPanel directoriesPanel;
    private javax.swing.JScrollPane directoriesScrollPane;
    private javax.swing.JTable directoriesTable;
    private javax.swing.JButton exitButton;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JPanel schedulePanel;
    private javax.swing.JButton syncButton;
    private javax.swing.JProgressBar syncProgressBar;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables

    public void updateSyncStatus(boolean syncing, double percent) {
        if (syncing) {
            syncButton.setText("Pause Sync");
        } else {
            syncButton.setText("Sync");
        }
        syncProgressBar.setValue((int) (percent * 100));
        pack();
    }

    public void updatePauseStatus(boolean paused) {
        if (paused) {
            pauseButton.setText("Restart Schedule");
        } else {
            pauseButton.setText("Pause Schedule");
        }
        pack();
    }

    /**
     *
     * @param listener
     */
    public synchronized void addUIListener(UIListener listener) {
        if (!_uiListeners.contains(listener)) {
            _uiListeners.add(listener);
        }
    }

    /**
     *
     * @param listener
     */
    public synchronized void removeUIListener(UIListener listener) {
        _uiListeners.remove(listener);
    }

    /**
     *
     * @param status
     */
    private synchronized void fireUIEvent(UIAction action) {
        UIEvent event = new UIEvent(this, action);
        for (UIListener listener : _uiListeners) {
            listener.actionPerformed(event);
        }
    }
}
