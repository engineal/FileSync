/*
 * Copyright (C) 2015 Aaron Lucia
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package filesync.ui;

import filesync.SyncIndex;
import filesync.SyncInterval;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Aaron Lucia
 */
public class IndexUI extends JFrame implements ActionListener, ChangeListener, KeyListener {

    private final SyncIndex index;
    private final DefaultListModel listModel;

    /**
     * Creates new form SyncIndexUI
     *
     * @param index
     */
    public IndexUI(SyncIndex index) {
        listModel = new DefaultListModel();
        initComponents();
        this.index = index;
        index.addPropertyChangeListener((PropertyChangeEvent e) -> {
            switch (e.getPropertyName()) {
                case "name":
                    updateTitle();
                    break;
            }
        });
        
        updateTitle();
        updateDirectories();
        updateSchedule();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        intervalGroup = new javax.swing.ButtonGroup();
        indexTextField = new javax.swing.JTextField();
        tabbedPane = new javax.swing.JTabbedPane();
        directoriesPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        directoriesScrollPane = new javax.swing.JScrollPane();
        directoriesList = new javax.swing.JList(listModel);
        schedulePanel = new javax.swing.JPanel();
        enabledCheckBox = new javax.swing.JCheckBox();
        minuteRadioButton = new javax.swing.JRadioButton();
        hourRadioButton = new javax.swing.JRadioButton();
        dayRadioButton = new javax.swing.JRadioButton();
        weekRadioButton = new javax.swing.JRadioButton();
        monthRadioButton = new javax.swing.JRadioButton();
        yearRadioButton = new javax.swing.JRadioButton();
        repeatSpinner = new javax.swing.JSpinner();
        statsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();

        setTitle("Sync Index");

        indexTextField.addKeyListener(this);

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filesync/ui/images/plus-2x.png"))); // NOI18N
        addButton.setToolTipText("Add");
        addButton.setBorder(null);
        addButton.setContentAreaFilled(false);
        addButton.addActionListener(this);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/filesync/ui/images/x-2x.png"))); // NOI18N
        removeButton.setToolTipText("Remove");
        removeButton.setBorder(null);
        removeButton.setContentAreaFilled(false);
        removeButton.addActionListener(this);

        directoriesScrollPane.setViewportView(directoriesList);

        javax.swing.GroupLayout directoriesPanelLayout = new javax.swing.GroupLayout(directoriesPanel);
        directoriesPanel.setLayout(directoriesPanelLayout);
        directoriesPanelLayout.setHorizontalGroup(
            directoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(directoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(directoriesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addGroup(directoriesPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        directoriesPanelLayout.setVerticalGroup(
            directoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, directoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(directoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(directoriesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPane.addTab("Directories", directoriesPanel);

        enabledCheckBox.setText("Enabled");
        enabledCheckBox.addActionListener(this);

        intervalGroup.add(minuteRadioButton);
        minuteRadioButton.setText("Minute");
        minuteRadioButton.addActionListener(this);

        intervalGroup.add(hourRadioButton);
        hourRadioButton.setSelected(true);
        hourRadioButton.setText("Hour");
        hourRadioButton.addActionListener(this);

        intervalGroup.add(dayRadioButton);
        dayRadioButton.setText("Day");
        dayRadioButton.addActionListener(this);

        intervalGroup.add(weekRadioButton);
        weekRadioButton.setText("Week");
        weekRadioButton.addActionListener(this);

        intervalGroup.add(monthRadioButton);
        monthRadioButton.setText("Month");
        monthRadioButton.addActionListener(this);

        intervalGroup.add(yearRadioButton);
        yearRadioButton.setText("Year");
        yearRadioButton.addActionListener(this);

        repeatSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        repeatSpinner.addChangeListener(this);

        javax.swing.GroupLayout schedulePanelLayout = new javax.swing.GroupLayout(schedulePanel);
        schedulePanel.setLayout(schedulePanelLayout);
        schedulePanelLayout.setHorizontalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enabledCheckBox)
                    .addGroup(schedulePanelLayout.createSequentialGroup()
                        .addComponent(minuteRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hourRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dayRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weekRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(monthRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearRadioButton))
                    .addComponent(repeatSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        schedulePanelLayout.setVerticalGroup(
            schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(enabledCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(schedulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minuteRadioButton)
                    .addComponent(hourRadioButton)
                    .addComponent(dayRadioButton)
                    .addComponent(weekRadioButton)
                    .addComponent(monthRadioButton)
                    .addComponent(yearRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(repeatSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(249, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Schedule", schedulePanel);

        jLabel1.setText("File count:");

        jLabel2.setText("Files added:");

        jLabel3.setText("Files unmodified:");

        jLabel4.setText("Files modified:");

        jLabel5.setText("Files removed:");

        javax.swing.GroupLayout statsPanelLayout = new javax.swing.GroupLayout(statsPanel);
        statsPanel.setLayout(statsPanelLayout);
        statsPanelLayout.setHorizontalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addContainerGap(305, Short.MAX_VALUE))
        );
        statsPanelLayout.setVerticalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap(219, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Stats", statsPanel);

        okButton.setText("OK");
        okButton.addActionListener(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton))
                    .addComponent(indexTextField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(indexTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap())
        );

        pack();
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == addButton) {
            IndexUI.this.addButtonActionPerformed(evt);
        }
        else if (evt.getSource() == removeButton) {
            IndexUI.this.removeButtonActionPerformed(evt);
        }
        else if (evt.getSource() == enabledCheckBox) {
            IndexUI.this.scheduleActionPerformed(evt);
        }
        else if (evt.getSource() == minuteRadioButton) {
            IndexUI.this.scheduleActionPerformed(evt);
        }
        else if (evt.getSource() == hourRadioButton) {
            IndexUI.this.scheduleActionPerformed(evt);
        }
        else if (evt.getSource() == dayRadioButton) {
            IndexUI.this.scheduleActionPerformed(evt);
        }
        else if (evt.getSource() == weekRadioButton) {
            IndexUI.this.scheduleActionPerformed(evt);
        }
        else if (evt.getSource() == monthRadioButton) {
            IndexUI.this.scheduleActionPerformed(evt);
        }
        else if (evt.getSource() == yearRadioButton) {
            IndexUI.this.scheduleActionPerformed(evt);
        }
        else if (evt.getSource() == okButton) {
            IndexUI.this.okButtonActionPerformed(evt);
        }
    }

    public void keyPressed(java.awt.event.KeyEvent evt) {
    }

    public void keyReleased(java.awt.event.KeyEvent evt) {
        if (evt.getSource() == indexTextField) {
            IndexUI.this.indexTextFieldKeyReleased(evt);
        }
    }

    public void keyTyped(java.awt.event.KeyEvent evt) {
    }

    public void stateChanged(javax.swing.event.ChangeEvent evt) {
        if (evt.getSource() == repeatSpinner) {
            IndexUI.this.repeatSpinnerStateChanged(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Select Directory");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            index.getDirectories().add(chooser.getSelectedFile());
        }
        updateDirectories();
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        if (directoriesList.getSelectedValue() instanceof File) {
            index.getDirectories().remove((File) directoriesList.getSelectedValue());
        }
        updateDirectories();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_okButtonActionPerformed

    private void scheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleActionPerformed
        index.getSchedule().setEnabled(enabledCheckBox.isSelected());
        if (minuteRadioButton.isSelected()) {
            index.getSchedule().setInterval(SyncInterval.MINUTE);
        } else if (hourRadioButton.isSelected()) {
            index.getSchedule().setInterval(SyncInterval.HOUR);
        } else if (dayRadioButton.isSelected()) {
            index.getSchedule().setInterval(SyncInterval.DAY);
        } else if (weekRadioButton.isSelected()) {
            index.getSchedule().setInterval(SyncInterval.WEEK);
        } else if (monthRadioButton.isSelected()) {
            index.getSchedule().setInterval(SyncInterval.MONTH);
        } else if (yearRadioButton.isSelected()) {
            index.getSchedule().setInterval(SyncInterval.YEAR);
        }
    }//GEN-LAST:event_scheduleActionPerformed

    private void repeatSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_repeatSpinnerStateChanged
        index.getSchedule().setRepeat(Integer.parseInt(repeatSpinner.getValue().toString()));
    }//GEN-LAST:event_repeatSpinnerStateChanged

    private void indexTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_indexTextFieldKeyReleased
        index.setName(indexTextField.getText());
    }//GEN-LAST:event_indexTextFieldKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JRadioButton dayRadioButton;
    private javax.swing.JList directoriesList;
    private javax.swing.JPanel directoriesPanel;
    private javax.swing.JScrollPane directoriesScrollPane;
    private javax.swing.JCheckBox enabledCheckBox;
    private javax.swing.JRadioButton hourRadioButton;
    private javax.swing.JTextField indexTextField;
    private javax.swing.ButtonGroup intervalGroup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JRadioButton minuteRadioButton;
    private javax.swing.JRadioButton monthRadioButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JSpinner repeatSpinner;
    private javax.swing.JPanel schedulePanel;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JRadioButton weekRadioButton;
    private javax.swing.JRadioButton yearRadioButton;
    // End of variables declaration//GEN-END:variables

    private void updateTitle() {
        setTitle(index.getName());
        indexTextField.setText(index.getName());
    }

    private void updateDirectories() {
        listModel.clear();

        for (File path : index.getDirectories()) {
            listModel.addElement(path);
        }
    }

    private void updateSchedule() {
        enabledCheckBox.setSelected(index.getSchedule().isEnabled());
        switch (index.getSchedule().getInterval()) {
            case MINUTE:
                minuteRadioButton.setSelected(true);
                break;
            case HOUR:
                hourRadioButton.setSelected(true);
                break;
            case DAY:
                dayRadioButton.setSelected(true);
                break;
            case WEEK:
                weekRadioButton.setSelected(true);
                break;
            case MONTH:
                monthRadioButton.setSelected(true);
                break;
            case YEAR:
                yearRadioButton.setSelected(true);
                break;
        }
        repeatSpinner.setValue(index.getSchedule().getRepeat());
    }
}
